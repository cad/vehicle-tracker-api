{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Vehicle Tracker API provides necessary methods and means to\ntrack ground and water vehicles positions.",
    "title": "Vehicle Tracker API",
    "termsOfService": "https://api.vehicles.neu.edu.tr/",
    "version": "0.0.2"
  },
  "host": "api.vehicles.neu.edu.tr",
  "basePath": "/",
  "paths": {
    "/agents/": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "List all the agents.",
        "operationId": "GetAllAgents",
        "responses": {
          "200": {
            "$ref": "#/responses/AgentSuccessAgentsResponse"
          },
          "default": {
            "$ref": "#/responses/ErrorMsg"
          }
        }
      }
    },
    "/agents/{uuid}/sync": {
      "post": {
        "tags": [
          "Agents"
        ],
        "summary": "Send GPS data from agent.",
        "operationId": "SyncAgent",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "UUID",
            "description": "UUID is an unique identifier across agents",
            "name": "uuid",
            "in": "path",
            "required": true
          },
          {
            "description": "Data represents the x,y location of the agent at ts time.",
            "name": "Data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GPSData"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AgentEmptyResponse"
          },
          "default": {
            "$ref": "#/responses/ErrorMsg"
          }
        }
      }
    },
    "/vehicles/": {
      "get": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Get all vehicles in the database.",
        "operationId": "GetAllVehicles",
        "responses": {
          "200": {
            "$ref": "#/responses/VehiclesResponse"
          },
          "default": {
            "$ref": "#/responses/ErrorMsg"
          }
        }
      },
      "post": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Create a new vehicle record.",
        "operationId": "CreateNewVehicle",
        "parameters": [
          {
            "description": "Ident represents the identity definition of the  Vehicle",
            "name": "Ident",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "plate_id"
              ],
              "properties": {
                "plate_id": {
                  "description": "PlateID",
                  "type": "string",
                  "x-go-name": "PlateID"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/VehicleResponse"
          },
          "default": {
            "$ref": "#/responses/ErrorMsg"
          }
        }
      }
    },
    "/vehicles/{plate_id}": {
      "get": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Get a vehicle from database.",
        "operationId": "GetVehicle",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "PlateID",
            "description": "PlateID is a unique identifier across the vehicles",
            "name": "plate_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/VehicleResponse"
          },
          "default": {
            "$ref": "#/responses/ErrorMsg"
          }
        }
      },
      "delete": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Delete a vehicle.",
        "operationId": "DeleteVehicle",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "PlateID",
            "description": "PlateID is an unique identifier across vehicles",
            "name": "plate_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/VehicleResponse"
          },
          "default": {
            "$ref": "#/responses/ErrorMsg"
          }
        }
      }
    },
    "/vehicles/{plate_id}/sync": {
      "post": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Set position.",
        "operationId": "SyncVehicle",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "PlateID",
            "description": "PlateID is an unique identifier across vehicles",
            "name": "plate_id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Location",
            "description": "Location represents the x,y location of the Vehicle",
            "name": "location",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CoordinatePair"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/VehicleResponse"
          },
          "default": {
            "$ref": "#/responses/ErrorMsg"
          }
        }
      }
    }
  },
  "definitions": {
    "Agent": {
      "type": "object",
      "properties": {
        "gps_ts": {
          "type": "string",
          "x-go-name": "TS"
        },
        "label": {
          "type": "string",
          "x-go-name": "Label"
        },
        "lat": {
          "type": "string",
          "x-go-name": "Lat"
        },
        "lon": {
          "type": "string",
          "x-go-name": "Lon"
        },
        "updated_at": {
          "x-go-name": "UpdatedAt"
        },
        "uuid": {
          "type": "string",
          "x-go-name": "UUID"
        }
      },
      "x-go-package": "github.com/cad/vehicle-tracker-api/repository"
    },
    "CoordinatePair": {
      "description": "CoordinatePair represents a location on earth",
      "type": "object",
      "required": [
        "lat",
        "lon"
      ],
      "properties": {
        "lat": {
          "description": "Latitude",
          "type": "number",
          "format": "double",
          "x-go-name": "Lat"
        },
        "lon": {
          "description": "Longtitude",
          "type": "number",
          "format": "double",
          "x-go-name": "Lon"
        }
      },
      "x-go-package": "github.com/cad/vehicle-tracker-api/endpoints"
    },
    "GPSData": {
      "type": "object",
      "properties": {
        "lat": {
          "type": "string",
          "x-go-name": "Lat"
        },
        "lon": {
          "type": "string",
          "x-go-name": "Lon"
        },
        "ts": {
          "type": "string",
          "x-go-name": "TS"
        }
      },
      "x-go-package": "github.com/cad/vehicle-tracker-api/endpoints"
    },
    "GenericError": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "description": "Error Message",
          "type": "string",
          "x-go-name": "Message"
        }
      },
      "x-go-package": "github.com/cad/vehicle-tracker-api/endpoints"
    },
    "Vehicle": {
      "type": "object",
      "properties": {
        "lat": {
          "type": "number",
          "format": "double",
          "x-go-name": "Lat"
        },
        "lon": {
          "type": "number",
          "format": "double",
          "x-go-name": "Lon"
        },
        "plate_id": {
          "type": "string",
          "x-go-name": "PlateID"
        },
        "updated_at": {
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "github.com/cad/vehicle-tracker-api/repository"
    }
  },
  "responses": {
    "AgentSuccessAgentResponse": {
      "description": "Returns an agent",
      "schema": {
        "$ref": "#/definitions/Agent"
      }
    },
    "AgentSuccessAgentsResponse": {
      "description": "Returns list of agents",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Agent"
        }
      }
    },
    "AgentSuccessEmptyResponse": {
      "description": "Returns empty object"
    },
    "ErrorMsg": {
      "description": "Generic Error",
      "schema": {
        "$ref": "#/definitions/GenericError"
      }
    },
    "VehicleResponse": {
      "description": "VehicleResponse",
      "schema": {
        "type": "object",
        "properties": {
          "vehicle": {
            "$ref": "#/definitions/Vehicle"
          }
        }
      }
    }
  }
}